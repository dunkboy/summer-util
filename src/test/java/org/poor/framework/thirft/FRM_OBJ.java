package org.poor.framework.thirft;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-29")
public class FRM_OBJ implements org.apache.thrift.TBase<FRM_OBJ, FRM_OBJ._Fields>, java.io.Serializable, Cloneable, Comparable<FRM_OBJ> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FRM_OBJ");

  private static final org.apache.thrift.protocol.TField FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("frame", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FRM_OBJStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FRM_OBJTupleSchemeFactory();

  public java.nio.ByteBuffer frame; // required
  public int height; // required
  public int width; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRAME((short)1, "frame"),
    HEIGHT((short)2, "height"),
    WIDTH((short)3, "width");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FRAME
          return FRAME;
        case 2: // HEIGHT
          return HEIGHT;
        case 3: // WIDTH
          return WIDTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HEIGHT_ISSET_ID = 0;
  private static final int __WIDTH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRAME, new org.apache.thrift.meta_data.FieldMetaData("frame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FRM_OBJ.class, metaDataMap);
  }

  public FRM_OBJ() {
  }

  public FRM_OBJ(
    java.nio.ByteBuffer frame,
    int height,
    int width)
  {
    this();
    this.frame = org.apache.thrift.TBaseHelper.copyBinary(frame);
    this.height = height;
    setHeightIsSet(true);
    this.width = width;
    setWidthIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FRM_OBJ(FRM_OBJ other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFrame()) {
      this.frame = org.apache.thrift.TBaseHelper.copyBinary(other.frame);
    }
    this.height = other.height;
    this.width = other.width;
  }

  public FRM_OBJ deepCopy() {
    return new FRM_OBJ(this);
  }

  @Override
  public void clear() {
    this.frame = null;
    setHeightIsSet(false);
    this.height = 0;
    setWidthIsSet(false);
    this.width = 0;
  }

  public byte[] getFrame() {
    setFrame(org.apache.thrift.TBaseHelper.rightSize(frame));
    return frame == null ? null : frame.array();
  }

  public java.nio.ByteBuffer bufferForFrame() {
    return org.apache.thrift.TBaseHelper.copyBinary(frame);
  }

  public FRM_OBJ setFrame(byte[] frame) {
    this.frame = frame == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(frame.clone());
    return this;
  }

  public FRM_OBJ setFrame(java.nio.ByteBuffer frame) {
    this.frame = org.apache.thrift.TBaseHelper.copyBinary(frame);
    return this;
  }

  public void unsetFrame() {
    this.frame = null;
  }

  /** Returns true if field frame is set (has been assigned a value) and false otherwise */
  public boolean isSetFrame() {
    return this.frame != null;
  }

  public void setFrameIsSet(boolean value) {
    if (!value) {
      this.frame = null;
    }
  }

  public int getHeight() {
    return this.height;
  }

  public FRM_OBJ setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  public int getWidth() {
    return this.width;
  }

  public FRM_OBJ setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FRAME:
      if (value == null) {
        unsetFrame();
      } else {
        if (value instanceof byte[]) {
          setFrame((byte[])value);
        } else {
          setFrame((java.nio.ByteBuffer)value);
        }
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FRAME:
      return getFrame();

    case HEIGHT:
      return getHeight();

    case WIDTH:
      return getWidth();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FRAME:
      return isSetFrame();
    case HEIGHT:
      return isSetHeight();
    case WIDTH:
      return isSetWidth();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FRM_OBJ)
      return this.equals((FRM_OBJ)that);
    return false;
  }

  public boolean equals(FRM_OBJ that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_frame = true && this.isSetFrame();
    boolean that_present_frame = true && that.isSetFrame();
    if (this_present_frame || that_present_frame) {
      if (!(this_present_frame && that_present_frame))
        return false;
      if (!this.frame.equals(that.frame))
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFrame()) ? 131071 : 524287);
    if (isSetFrame())
      hashCode = hashCode * 8191 + frame.hashCode();

    hashCode = hashCode * 8191 + height;

    hashCode = hashCode * 8191 + width;

    return hashCode;
  }

  @Override
  public int compareTo(FRM_OBJ other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFrame()).compareTo(other.isSetFrame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frame, other.frame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(other.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, other.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FRM_OBJ(");
    boolean first = true;

    sb.append("frame:");
    if (this.frame == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.frame, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FRM_OBJStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FRM_OBJStandardScheme getScheme() {
      return new FRM_OBJStandardScheme();
    }
  }

  private static class FRM_OBJStandardScheme extends org.apache.thrift.scheme.StandardScheme<FRM_OBJ> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FRM_OBJ struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FRAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.frame = iprot.readBinary();
              struct.setFrameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FRM_OBJ struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.frame != null) {
        oprot.writeFieldBegin(FRAME_FIELD_DESC);
        oprot.writeBinary(struct.frame);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.height);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(struct.width);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FRM_OBJTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FRM_OBJTupleScheme getScheme() {
      return new FRM_OBJTupleScheme();
    }
  }

  private static class FRM_OBJTupleScheme extends org.apache.thrift.scheme.TupleScheme<FRM_OBJ> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FRM_OBJ struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFrame()) {
        optionals.set(0);
      }
      if (struct.isSetHeight()) {
        optionals.set(1);
      }
      if (struct.isSetWidth()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFrame()) {
        oprot.writeBinary(struct.frame);
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetWidth()) {
        oprot.writeI32(struct.width);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FRM_OBJ struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.frame = iprot.readBinary();
        struct.setFrameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(2)) {
        struct.width = iprot.readI32();
        struct.setWidthIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

